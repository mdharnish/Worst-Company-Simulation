"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my honor, Dharnish Muralidharan, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: dm55786
UT EID 2:
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self.performance = INITIAL_PERFORMANCE
        self.happiness = INITIAL_HAPPINESS
        self.salary = salary
    @property
    def name(self):
        """
        Gets the name of the employee.
        """
        return self.__name
    @property
    def manager(self):
        """
        Gets the manager of the employee.
        """
        return self.__manager
    @property
    def performance(self):
        """
        Gets the performance of the employee.
        """
        return self._performance
    @performance.setter
    def performance(self, value):
        """
        Sets the performance of the employee.
        """
        if value > PERCENTAGE_MAX:
            self._performance = PERCENTAGE_MAX
        elif value < PERCENTAGE_MIN:
            self._performance = PERCENTAGE_MIN
        else:
            self._performance = value
    @property
    def happiness(self):
        """
        Gets the happiness of the employee.
        """
        return self._happiness
    @happiness.setter
    def happiness(self, value):
        """
        Sets the happiness of the employee.
        """
        if value > PERCENTAGE_MAX:
            self._happiness = PERCENTAGE_MAX
        elif value < PERCENTAGE_MIN:
            self._happiness = PERCENTAGE_MIN
        else:
            self._happiness = value
    @property
    def salary(self):
        """
        Gets the salary of the employee.
        """
        return self._salary
    @salary.setter
    def salary(self, value):
        """
        Sets the salary of the employee.
        """
        if value < 0:
            raise ValueError(SALARY_ERROR_MESSAGE)
        self._salary = value
    @abstractmethod
    def work(self):
        """
        Abstract method that is implemented by the subclasses of the Employee class.
        """
        pass
    def interact(self, other):
        """
        Simulates an interaction between this employee and another employee (other).
        """
        if other.name not in self.relationships:
            self.relationships[other.name] = 0
        if self.relationships[other.name] > RELATIONSHIP_THRESHOLD:
            self.happiness += 1
        elif self.happiness >= HAPPINESS_THRESHOLD and other.happiness >= HAPPINESS_THRESHOLD:
            self.relationships[other.name] += 1
        else:
            self.relationships[other.name] -= 1
            self.happiness -= 1
    def daily_expense(self):
        """
        Simulates the employeeâ€™s daily expenses by reducing their happiness and savings.
        """
        self.happiness -= 1
        self.savings -= DAILY_EXPENSE
    def __str__(self):
        return (f"{self.name}"
                f"\n\tSalary: ${self.salary}"
                f"\n\tSavings: ${self.savings}"
                f"\n\tHappiness: {self.happiness}%"
                f"\n\tPerformance: {self.performance}%")


class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """
    def work(self):
        performance_change = random.randint(-5,5)
        self.performance += performance_change
        if performance_change <= 0:
            self.happiness -= 1
            for employee in self.relationships:
                self.relationships[employee] -= 1
        else:
            self.happiness += 1


class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """
    def work(self):
        performance_change = random.randint(-15,15)
        self.performance += performance_change
        if performance_change <= 0:
            self.happiness -= 2
        else:
            self.happiness += 1
    def interact(self, other):
        super().interact(other)
        if other == self.manager:
            if other.happiness > HAPPINESS_THRESHOLD:
                if self.performance >= TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD:
                    self.savings += MANAGER_BONUS
            else:
                self.salary //= 2
                self.happiness -= 5
                if self.salary <= 0:
                    self.is_employed = False
     

class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
    def work(self):
        performance_change = random.randint(-10,10)
        self.performance += performance_change
        if performance_change >= 0:
            self.happiness += 1
    def interact(self, other):
        super().interact(other)
        if other == self.manager:
            if other.happiness > HAPPINESS_THRESHOLD:
                if self.performance > PERM_EMPLOYEE_PERFORMANCE_THRESHOLD:
                    self.savings += MANAGER_BONUS
            else:
                self.happiness -= 1
